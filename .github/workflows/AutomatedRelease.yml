name: "Automated Release"

on:
  push:
    branches:
      - main

jobs:
  build:
    name: "Build"
    runs-on: "windows-latest"
    
    env:
      BUILD_CONFIG: 'Release'
      BUILD_PLATFORM: 'Any CPU'
      SOLUTION: 'SRTPluginBase.sln'
      PROJECT: 'src/SRTPluginBase/SRTPluginBase.csproj'

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Get current UTC DateTime
      id: get-datetime
      run: echo '::set-output name=UTCDateTime::' + [System.DateTime]::UtcNow.ToString("yyyyMMddHHmmss")
        
    - name: Get project version information
      id: project-versions
      run: Select-String -Path "$env:PROJECT" '<(?<TagName>\w*?Version)>(?<Major>\d+)(?:\.(?<Minor>\d+))(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?</\w*?Version>' -AllMatches | Foreach-Object -Process {$_.Matches} | Foreach-Object -Process { $tagName = $_.Groups["TagName"].Value; $_.Groups | Where-Object { $_.Name -ne "0" -and $_.Name -ne "TagName"; } } | Foreach-Object -Process { "::set-output name=" + $tagName + "_" + $_.Name + "::" + $_.Value; }

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.6

    - name: Restore dependencies
      run: nuget restore $env:SOLUTION

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Build
      env:
        VERSION: '${{steps.project-versions.outputs.Version_Major}}.${{steps.project-versions.outputs.Version_Minor}}.${{steps.project-versions.outputs.Version_Patch}}.${{steps.get-datetime.outputs.UTCDateTime}}'
      run: dotnet build $env:SOLUTION /p:"Configuration=$env:BUILD_CONFIG;Platform=$env:BUILD_PLATFORM" --no-restore

    - name: Run tests
      env:
        VERSION: '${{steps.project-versions.outputs.Version_Major}}.${{steps.project-versions.outputs.Version_Minor}}.${{steps.project-versions.outputs.Version_Patch}}.${{steps.get-datetime.outputs.UTCDateTime}}'
      run: dotnet test /p:"Configuration=$env:BUILD_CONFIG;Platform=$env:BUILD_PLATFORM" --no-restore --no-build --verbosity normal
      
    - name: Decode the pfx
      run: |
        Set-Content -Path "CodeSign.txt" -Value "${{ secrets.CERTIFICATE }}"
        certutil -decode "CodeSign.txt" "CodeSign.pfx"
        Remove-Item -Path "CodeSign.txt"
        
    - name: Code sign the nupkg
      run: |
        $filesToZip = (Get-ChildItem -Path 'src/' -Filter *.nupkg -Recurse).fullname
        foreach ($fileToZip in $filesToZip) {
        & dotnet nuget sign "$fileToZip" --certificate-path "CodeSign.pfx" --certificate-password "${{secrets.CERTIFICATE_PASS}}" --timestamper "http://timestamp.digicert.com"
        }

    - name: Publish
      run: nuget push **\*.nupkg -Source "https://api.nuget.org/v3/index.json" -ApiKey "${{secrets.NUGET_API_KEY}}" -SkipDuplicate